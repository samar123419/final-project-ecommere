name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          retention-days: 1

  build:
    needs: source
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: code
      
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.6'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          if [ -f "./requirements.txt" ]; then
            pip install -r ./requirements.txt
          else
            echo "Error: requirements.txt not found"
            exit 1
          fi

      - name: Install npm packages and run build command
        run: |
          cd ./frontend
          npm install
          NODE_OPTIONS=--openssl-legacy-provider npm run build


      # Cache the virtual environment instead of uploading it as an artifact
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          overwrite: true
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.6'
          cache: 'pip'

      # Restore the cached virtual environment
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest

  
  deploy:
    if: ${{ needs.test.result == 'success' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/shopimage:latest .

      - name: Login and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/shopimage:latest
          
      # - name: Deploy to render.com
      #   uses: gh-actions-workflows/deploy-docker-render@v1.1
      #   with:
      #     deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
      #     image-url: ${{ secrets.DOCKER_USERNAME }}/shopimage:latest
      #     render-api-key: ${{ secrets.RENDER_TOKEN }}
      #     wait-for-deployment: true

      # uses: renderinc/render-action@v1
      # with:
      #   render-token: ${{ secrets.RENDER_TOKEN }}
      #   service-name: shopimage
      #   docker-image: ${{ secrets.DOCKER_USERNAME }}/shopimage:latest
      
      # - name: Deploy to render.com
      #   uses: renderinc/render-action@v1
      #   with:
      #     render-token: ${{ secrets.RENDER_TOKEN }}
      #     service-name: shopimage


  notify:
    if: ${{ needs.test.result != 'success' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          echo "Tests failed, sending notification to developers."
          # Add your notification logic here

      # - name: Send Slack notification
      #   uses: 8398a7/action-slack@v4
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,event_name,ref,workflow
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # - name: Send email notification
      #   uses: dawidd6/action-send-mail@master
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 587
      #     username: ${{ secrets.EMAIL_USERNAME }}
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: "CI/CD Pipeline Failed"
      #     to: ${{ secrets.EMAIL_TO }}
      #     from: ${{ secrets.EMAIL_FROM }}
      #     message: |
      #       The CI/CD pipeline has failed. Please check the logs for more details.

      # - name: Open Jira issue
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.issues.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: 'CI/CD Pipeline Failed',
      #         body: 'The CI/CD pipeline has failed. Please check the logs for more details.'
      #       })

